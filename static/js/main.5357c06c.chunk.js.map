{"version":3,"sources":["logo.svg","lib/form-polygons.js","Components/Map/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","make_polygons","ne","sw","validTime","geo","la","lat","lon","lng","geometry","properties","Math","round","random","features","push","MapView","mapRef","React","useRef","useState","polys","setPolys","latitude","longitude","zoom","bearing","pitch","viewPort","setViewPort","useEffect","bounds","current","getMap","getBounds","create_polygons","_ne","_sw","width","height","onViewportChange","mapboxApiAccessToken","tokens","ref","type","data","id","paint","property","stops","style","App","className","Map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAAAA,EAAOC,QAAU,IAA0B,kC,4IC6C5BC,G,MAlCO,SAAEC,EAAIC,EAAIC,GAU5B,IANA,IAAMC,EAAM,CACR,KAAQ,oBACR,SAAY,IAIPC,EAAMH,EAAGI,IAAMD,GAAMJ,EAAGK,IAAKD,GAAM,EAExC,IAAK,IAAIE,EAAML,EAAGM,IAAKD,GAAON,EAAGO,IAAKD,GAAM,EAAG,CAG3C,IAAME,EAAW,CACb,KAAQ,UACR,YAAe,CAAC,CAAC,CAACF,EAAKF,GAAK,CAACE,EAAM,EAAGF,GAAK,CAACE,EAAM,EAAGF,EAAK,GAAI,CAACE,EAAKF,EAAK,GAAI,CAACE,EAAKF,MAGjFK,EAAa,CACf,YAAc,IAAOC,KAAKC,MAAoB,GAAdD,KAAKE,WAGzCT,EAAIU,SAASC,KAAK,CAAE,SAAYN,EAAU,KAAQ,UAAW,WAAcC,IAGnF,OAAON,IC6BIY,EA7DC,WACZ,IAAMC,EAASC,IAAMC,SADH,EAEQC,qBAFR,mBAEXC,EAFW,KAEJC,EAFI,OAGcF,mBAAS,CAErCG,SAAU,SACVC,UAAW,QACXC,KAAM,EACNC,QAAS,EACTC,MAAO,IATO,mBAGXC,EAHW,KAGDC,EAHC,KAalBC,qBAAU,WACN,GAAIb,EAAQ,CAER,IAAMc,EAASd,EAAOe,QAAQC,SAASC,YAGjC9B,EAAM+B,EAAgBJ,EAAOK,IAAKL,EAAOM,IAAK,QAEpDf,EAASlB,MAGd,CAACa,EAAQW,IAkBZ,OACI,kBAAC,IAAD,iBACQA,EADR,CAEIU,MAAM,QACNC,OAAO,QACPC,iBAAkBX,EAClBY,qBAAsBC,EAAM,OAC5BC,IAAK1B,IAEJI,GAAU,kBAAC,IAAD,CAAQuB,KAAK,UAAUC,KAAMxB,GACpC,kBAAC,IA1BK,CACdyB,GAAI,OACJF,KAAM,OACNG,MAAO,CACH,aAAc,CACZC,SAAU,cACVC,MAAO,CACL,CAAC,IAAM,WACP,CAAC,KAAM,aAIX,eAAgB,OAgBhB,yBAAKC,MAAO,CAAE,SAAY,WAAY,MAAS,MAC3C,kBAAC,IAAD,SC7CDC,MAXf,WAGE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5357c06c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import zarr from 'zarr';\n\n/**\n * \n * @param {*} arr zArray of forecast data\n * @param {*} nw northwest coords of map area\n * @param {*} se southeast coords of map area\n * @param {*} validTime forecast timestamp\n */\n\n\nconst make_polygons = ( ne, sw, validTime) => {\n    //const forecast = arr[validTime, null, null] // get all datapoints for desired forecast\n\n    // init geojson object\n    const geo = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n    }\n    // iterate over coords in zArr\n    // first loop is latitude\n    for (let la = (sw.lat); la <= ne.lat; la += 1) {\n        //second is longitude\n        for (let lon = sw.lng; lon <= ne.lng; lon +=1) {\n            //console.log(lon)\n            //console.log(la)\n            const geometry = {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[[lon, la], [lon + 1, la], [lon + 1, la + 1], [lon, la + 1], [lon, la]]]\n            }\n\n            const properties = {\n                \"airPressure\":1000 + Math.round(Math.random()*25)\n            }\n\n            geo.features.push({ \"geometry\": geometry, \"type\": \"Feature\", \"properties\": properties })\n        }\n    }\n    return geo\n}\n\nexport const roundToQuarter = (number) => {\n    return (Math.round(number * 4) / 4).toFixed(2)\n}\n\nexport default make_polygons;","import React, { useState, useEffect } from 'react';\nimport MapGL, { NavigationControl, Source, Layer } from 'react-map-gl';\nimport tokens from '../../tokens.json'\nimport create_polygons, { roundToQuarter } from '../../lib/form-polygons'\nimport { dataLayer } from './mapstyle'\n\nconst MapView = () => {\n    const mapRef = React.useRef();\n    const [polys, setPolys] = useState();\n    const [viewPort, setViewPort] = useState({\n        // just for prototyping purposes, change initial coords later\n        latitude: 59.33258,\n        longitude: 18.0649,\n        zoom: 5,\n        bearing: 0,\n        pitch: 0\n    });\n\n    // update map bounds when viewport changes\n    useEffect(() => {\n        if (mapRef) {\n            // find coordinates of edges of map\n            const bounds = mapRef.current.getMap().getBounds();\n        \n            // use coordinate edges to filter data\n            const geo = create_polygons(bounds._ne, bounds._sw, \"aaaa\")\n            //console.log(polys)\n            setPolys(geo);\n\n        }\n    }, [mapRef, viewPort])\n\n    const dataLayer = {\n        id: 'data',\n        type: 'fill',\n        paint: {\n            'fill-color': {\n              property: 'airPressure',\n              stops: [\n                [1000, '#3288bd'],\n                [1100, '#66c2a5'],\n                \n              ]\n            },\n            'fill-opacity': 0.5\n          }\n    }\n\n    return (\n        <MapGL\n            {...viewPort}\n            width=\"100wv\"\n            height=\"100vh\"\n            onViewportChange={setViewPort}\n            mapboxApiAccessToken={tokens[\"mapbox\"]}\n            ref={mapRef}\n        >\n            {polys && (<Source type=\"geojson\" data={polys}>\n                <Layer {...dataLayer} />\n            </Source>)}\n            <div style={{ \"position\": \"absolute\", \"right\": \"0\" }}>\n                <NavigationControl />\n            </div>\n        </MapGL>\n    )\n}\n\nexport default MapView","import React, { useEffect, useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MapView from './Components/Map'\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <MapView />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
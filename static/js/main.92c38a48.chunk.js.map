{"version":3,"sources":["Components/Map/windGradient.png","lib/form-polygons.js","Components/Map/index.js","lib/use-fetch.js","lib/create_range.js","Components/Timeline/index.js","App.js","serviceWorker.js","index.js","Components/Map/tempGradient.png"],"names":["module","exports","make_polygons","data","lon","lat","validTime","height","referenceTime","console","log","tempForecast","uForecast","vForecast","geo","long","length","latit","geometry","properties","Math","sqrt","pow","features","push","MapView","polygons","DropDown","mapRef","React","useRef","useState","hoverData","setHoverData","boundSW","boundNE","latitude","longitude","zoom","bearing","pitch","viewPort","setViewPort","useEffect","tempLayer","id","type","paint","windSpeedLayer","tempGradient","useGradientPic","setGradientPic","useLayer","setLayer","buttonStyle","width","borderRadius","fontSize","onViewportChange","mapboxApiAccessToken","tokens","onHover","event","poly","hoverInfo","lngLat","info","interactiveLayerIds","ref","minZoom","closeButton","className","round","temperature","windspeed","renderPopUp","style","positionOptions","enableHighAccuracy","trackUserLocation","viewport","transitionDuration","position","display","flexDirection","right","top","onClick","onClickCapture","windGradient","bottom","src","alt","checkStatus","res","a","ok","json","error","message","errors","parseJson","response","status","useFetch","isLoading","setIsLoading","setData","setError","statusCode","setStatusCode","url","options","fetch","checked","parsed","range","start","end","step","arr2","i","Timeline","dataItems","refTimes","updateRefTime","items","index","timeBegin","Date","parse","timeEnd","d","ds","df","setHours","getHours","lane","refTime","d3","remove","scale","domain","xAxis","tickFormat","currentTime","now","m","current","x","x1","y2","mini","append","attr","classed","selectAll","enter","text","selected","itemRects","on","this","call","ticks","miniHeight","rects","labels","filter","maxExtent","minExtent","exit","max","REFERENCE_TIME","bounds","coords","App","setPolygons","forecastTimes","setForecastTimes","setReferenceTime","setValidTime","validTimes","setValidTimes","params","headers","BASE_URL","JSON","stringify","create_polygons","indexOf","currentRef","Map","onChange","opt","target","value","map","el","key","hrs","createTime","toLocaleTimeString","createDropdown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92c38a48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/windGradient.4226779c.png\";","\n\n/**\n *\n * @param {*} arr array of forecast data\n * @param {*} nw northwest coords of map area\n * @param {*} se southeast coords of map area\n * @param {*} validTime forecast timestamp\n */\n\n\nconst make_polygons = (data, lon, lat, validTime, height, referenceTime) => {\n    // get the desired forecast\n    //referenceTime = referenceTime < 0 ?  0 : referenceTime\n    console.log(`reference: ${referenceTime}, validTime: ${validTime}`)\n    const tempForecast = data['T']['data'][referenceTime][validTime][height];\n    const uForecast = data['U']['data'][referenceTime][validTime][height];\n    const vForecast = data['V']['data'][referenceTime][validTime][height];\n    // init geojson object\n    const geo = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n    }\n    // iterate over coords in data\n    // first loop is latitude\n    for (let long = 0; long < lon.length - 1; long++) {\n        //second is longitude\n        for (let latit = 0; latit < lat.length - 1; latit++) {\n            //console.log(lat_start)\n            const geometry = {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[[lon[long], lat[latit]], [lon[long+ 1], lat[latit]], [lon[long + 1], lat[latit + 1]], [lon[long], lat[latit + 1]], [lon[long], lat[latit]]]]\n            }\n            let properties = {}\n            if (latit < lat.length - 1 && long < lon.length - 1) {\n                properties = {\n                    \"temperature\": ((tempForecast[latit][long] + tempForecast[latit + 1][long] + tempForecast[latit + 1][long + 1] + tempForecast[latit][long + 1]) / 4),\n                    \"windspeed\": Math.sqrt(Math.pow(uForecast[latit][long], 2) + Math.pow(vForecast[latit][long], 2))\n                }\n\n            }\n            else {\n                properties = {\n                    \"temperature\": tempForecast[latit][long],\n                    \"windspeed\" : Math.sqrt(Math.pow(uForecast[latit][long], 2) + Math.pow(vForecast[latit][long], 2))\n                }\n            }\n            geo.features.push({ \"geometry\": geometry, \"type\": \"Feature\", \"properties\": properties })\n        }\n    }\n\n    console.log(geo);\n    return geo\n}\n\nexport const roundToQuarter = (number) => {\n    return (Math.round(number * 4) / 4).toFixed(2)\n}\n\nexport default make_polygons;\n","import \"mapbox-gl/dist/mapbox-gl.css\"\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\"\nimport React, { useState, useEffect } from 'react';\nimport MapGL, { NavigationControl, Source, Layer, GeolocateControl, Popup } from 'react-map-gl';\nimport tokens from '../../tokens.json'\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport Geocoder from \"react-map-gl-geocoder\";\nimport windGradient from './windGradient.png'\nimport tempGradient from './tempGradient.png'\n\nimport create_polygons, { roundToQuarter } from '../../lib/form-polygons'\nimport { dataLayer } from './mapstyle'\n\nconst MapView = ({ polygons, DropDown }) => {\n  const mapRef = React.useRef();\n  const [polys, setPolys] = useState();\n  const [hoverData, setHoverData] = useState();\n\n  const boundSW = [13.250475, 54.500440]; //longitude, latitude TWEAK THESE FOR BETTER BOUNDS\n  const boundNE = [26.248053, 68.840996];\n\n  const [viewPort, setViewPort] = useState({\n    // just for prototyping purposes, change initial coords later\n    latitude: 59.33258,\n    longitude: 18.0649,\n    zoom: 7,\n    bearing: 0,\n    pitch: 0\n  });\n\n  const setBounds = (viewPort) => {\n    if (viewPort.longitude > boundNE[0]) {\n      viewPort.longitude = boundNE[0];\n    }\n    if (viewPort.longitude < boundSW[0]) {\n      viewPort.longitude = boundSW[0];\n    }\n    if (viewPort.latitude > boundNE[1]) {\n      viewPort.latitude = boundNE[1];\n    }\n    if (viewPort.latitude < boundSW[1]) {\n      viewPort.latitude = boundSW[1];\n    }\n\n    setViewPort(viewPort);\n  }\n\n  // update map bounds when viewport changes\n  useEffect(() => {\n    if (mapRef) {\n      // // find coordinates of edges of map\n      // const bounds = mapRef.current.getMap().getBounds();\n\n      // // use coordinate edges to filter data\n      // const geo = create_polygons(bounds._ne, bounds._sw, \"aaaa\")\n      // setPolys(geo);\n\n    }\n  }, [mapRef, viewPort])\n\n  const tempLayer = {\n    id: 'data',\n    type: 'fill',\n    paint: {\n      'fill-color': [\n        'interpolate',\n        ['linear'],\n        ['get', 'temperature'],\n          260,\n        '#d300fc',\n        273,\n        '#03f4fc',\n        300,\n        '#fc0703'\n      ],\n      'fill-opacity': 0.5,\n    }\n  }\n\n  const windSpeedLayer = {\n    id: 'data',\n    type: 'fill',\n    paint: {\n      'fill-color': [\n        'interpolate',\n        ['linear'],\n        ['get', 'windspeed'],\n        0,\n        '#44cdfc',\n        10,\n        '#000c7a'\n      ],\n      'fill-opacity': 0.3,\n    }\n  }\n  const [useGradientPic, setGradientPic] = useState(tempGradient);\n  const [useLayer, setLayer] = useState(tempLayer);\n  const setWindspeedLayer = () => { setLayer(windSpeedLayer) };\n  const setTemperatureLayer = () => { setLayer(tempLayer) };\n  const setTempGradient = () => { setGradientPic(tempGradient) };\n  const setWindGradient = () => { setGradientPic(windGradient) };\n\n\n  const buttonStyle = { width: 40, height: 40, borderRadius: 10, fontSize: 20 }\n  const buttonDiv = { position: \"absolute\", display: \"flex\", flexDirection: \"column\", right: 0, top: \"20%\" }\n  const displayGradient = { position: \"absolute\", display: \"flex\", bottom: 20, right: 0 }\n\n  const handleGeocoderViewportChange = viewport => {\n    const geocoderDefaultOverrides = { transitionDuration: 1000 };\n\n    return setViewPort({\n      ...viewport,\n      ...geocoderDefaultOverrides\n    });\n  };\n\n  const onHover = (event) => {\n    let temp = '';\n    let windSpeed = '';\n    let hoverInfo = null;\n    let poly;\n    if (event && event.lngLat && event.features && event.features[0]) {\n      poly = event.features[0];\n      hoverInfo = {\n        lngLat: event.lngLat,\n        info: poly.properties\n      };\n      setHoverData(hoverInfo);\n    }\n  }\n\n  const renderPopUp = () => {\n    if (hoverData) {\n      return (\n        <Popup longitude={hoverData.lngLat[0]} latitude={hoverData.lngLat[1]} closeButton={false}>\n          <div className=\"weather-info\">Temperature: {Math.round((hoverData.info.temperature - 273) * 10) / 10} °C</div>\n          <div className=\"weather-info\">Wind speed: {Math.round(hoverData.info.windspeed)} m/s</div>\n        </Popup>\n      );\n    }\n  }\n\n  return (\n    <MapGL\n      {...viewPort}\n      width=\"99vw\"\n      height=\"85vh\"\n      onViewportChange={setBounds}\n      mapboxApiAccessToken={tokens[\"mapbox\"]}\n      onHover={onHover}\n      interactiveLayerIds={['data']}\n      ref={mapRef}\n      minZoom={5}>\n      {\n        polygons && (\n          <Source type=\"geojson\" data={polygons}>\n            <Layer {...useLayer} />\n          </Source>\n\n        )\n      }\n      {renderPopUp()}\n      <div style={{ \"position\": \"absolute\", \"right\": \"0\" }}>\n        <NavigationControl />\n        <GeolocateControl\n          positionOptions={{ enableHighAccuracy: true }}\n          trackUserLocation={true}\n        />\n        <Geocoder\n          mapRef={mapRef}\n          onViewportChange={handleGeocoderViewportChange}\n          mapboxApiAccessToken={tokens[\"mapbox\"]}\n          position='top-left'\n        />\n      </div>\n      <div className=\"dropdownDiv\">\n        {DropDown}\n      </div>\n      <div style={buttonDiv}>\n        <button style={buttonStyle} onClick={setTemperatureLayer} onClickCapture={setTempGradient}>🌞</button>\n        <button style={buttonStyle} onClick={setWindspeedLayer} onClickCapture={setWindGradient}>💨</button>\n\n      </div>\n      <div style={displayGradient}>\n        <img width=\"50px\" height=\"338px\" src={useGradientPic} alt=\"Gradient\" />\n      </div>\n\n      {/*<div style={buttonDiv}>\n      <svg width=\"50\" height=\"200\">\n        <defs>\n          <linearGradient  id=\"sampleGradient\" x2=\"0%\" y2=\"100%\" >\n            <stop offset=\"0%\" stopColor={useColorOne}  />\n            <stop offset=\"100%\" stopColor={useColorTwo} />\n          </linearGradient>\n        </defs>\n        <g>\n          <rect x=\"100\" y=\"100\" width=\"50\" height=\"200\"\n                fill=\"url(#sampleGradient)\" />\n        </g>\n      </svg>\n      </div>*/}\n    </MapGL>\n  )\n}\n\nexport default MapView;\n","import { useState } from 'react'\n\nconst checkStatus = async res => {\n    if (res.ok) {\n        return res\n    }\n\n    try {\n        const json = await res.json();\n        let error = {\n            message: json.message\n        }\n\n        if (json.errors) {\n            error.errors = json.errors\n        }\n\n        throw error;\n\n    } catch (e) {\n        throw e;\n    }\n\n}\n\nconst parseJson = response => response.status === 204 ? null : response.json();\n\nconst useFetch = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [statusCode, setStatusCode] = useState(null);\n\n    const f = async (url, options={}) => {\n        try {\n            setIsLoading(true);\n            const res = await fetch(url, options);\n            const checked = await checkStatus(res);\n            const parsed  = await parseJson(checked);\n            setStatusCode(res.status);\n            setData(parsed);\n            setData(parsed);\n        } catch(e) {\n            setError(e);\n        } finally {\n            setIsLoading(false)\n        }\n    };\n\n    return [f, isLoading, data, error, statusCode];\n}\n\nexport default useFetch;","export const range = (start, end,step) => {\n    const arr2 = []\n    for (let i = start; i <= end; i += step){\n        arr2.push(i)\n    }\n    //const arr = Array.from({length:(end - start)}, (v,k) => k+start)\n    return arr2\n}","import React, { useRef } from 'react';\nimport * as d3 from \"d3\";\nimport styles from './timeline.css'\nimport _ from 'underscore'\nimport moment, { updateLocale } from 'moment'\nimport { updateExpression } from '@babel/types';\n\nconst Timeline = ({dataItems, start, end, refTimes, updateRefTime, referenceTime}) => {\n  // var formatTime = d3.timeFormat();\n  // add items to timeline\n  const items = [];\n  let index = 0;\n  var timeBegin = new Date(Date.parse(start))\n  var timeEnd = new Date(Date.parse(end))\n  var d = new Date(Date.parse(start))\n  while(d < timeEnd){\n    var ds = new Date(d)\n    var df = new Date(d).setHours(d.getHours() + 2)\n    items.push({\n      lane : 0,\n      id : index,\n      start : ds,\n      end : df,\n      refTime: refTimes[index]\n    });\n    index += 1;\n    d.setHours(d.getHours() + 3)\n  };\n  console.log(items)\n  // const latestEndTime = _.max(items, i => moment.utc(i.end)).end;\n  // const timeEnd = latestEndTime;\n  // const timeBegin = moment.utc(timeEnd).subtract(1, \"day\");\n\n  // var time1 = formatTime(Date.now());\n  // var time2 = formatTime(Date.now() + 60 * 60 * 1000);\n\n  var lanes = [\"Model runs\"];\n\n  //remove old charts\n  d3.selectAll(\".chart\").remove();\n  \n\n  var margin = { top: 250, right: 40, bottom: 250, left: 40 },\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n  var scale = d3.scaleTime()\n    .domain([timeBegin, timeEnd])\n    .range([0, width]);\n\n  var xAxis = d3.axisBottom()\n    .scale(scale)\n    .tickFormat(d3.timeFormat(\"%H:%M\"));\n\n\n  var maxExtent;\n  var minExtent;\n  const ref = useRef()\n\n  var currentTime = Date.now();\n\n  let svgElement = d3.select(ref.current);\n\n  var m = [20, 15, 15, 150], //top right bottom left\n    w = 960,\n    h = 40,\n    miniHeight = 1;\n\n  //scales\n  var x = d3.scaleTime()\n    .domain([timeBegin, timeEnd])\n    .range([0, w]);\n\n  var x1 = d3.scaleLinear()\n    .range([0, w]);\n\n  var y1 = d3.scaleLinear()\n    .domain([0, 1])\n    .range([0, miniHeight]);\n  var y2 = d3.scaleLinear()\n    .domain([0, 1])\n    .range([0, miniHeight]);\n\n\n  svgElement = d3.select(\"div#container\")\n    .append(\"svg\")\n    .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    .attr(\"viewBox\", \"0 0 1200 300\")\n    .classed(\"svg-content\", true)\n    .attr(\"class\", \"chart\");\n\n  var mini = svgElement.append(\"g\")\n    .attr(\"transform\", \"translate(\" + m[3] + \",\" + (m[0]) + \")\")\n    .attr(\"width\", w)\n    .attr(\"height\", miniHeight)\n    .attr(\"class\", \"timeline\");\n\n  //mini lanes and texts\n  mini.append(\"g\").selectAll(\".laneLines\")\n    .data(items)\n    .enter().append(\"line\")\n    .attr(\"x1\", currentTime)\n    .attr(\"x2\", currentTime)\n    .attr(\"y1\", 0)\n    .attr(\"y2\", miniHeight)\n    .attr(\"stroke\", \"black\");\n\n  mini.append(\"g\").selectAll(\".laneText\")\n    .data(lanes)\n    .enter().append(\"text\")\n    .text(function (d) { return d; })\n    .attr(\"x\", -m[1])\n    .attr(\"y\", function (d, i) { return y2(i + .5); })\n    .attr(\"dy\", \".5ex\")\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"class\", \"laneText\");\n\n  var itemRects = mini.append(\"g\")\n    .attr(\"clip-path\", \"url(#clip)\");\n  \n  var selected;\n\n  //mini item rects\n  mini.append(\"g\").selectAll(\"miniItems\")\n    .data(items)\n    .enter().append(\"rect\")\n    .attr(\"class\", function (d) { return \"miniItem\" + d.lane; })\n    .attr(\"x\", function (d) { return x(d.start); })\n    .attr(\"y\", function (d) { return y2(d.lane + .5) - 5; })\n    .attr(\"width\", function (d) { return (x(d.end) - x(d.start)); })\n    .attr(\"height\", 10)\n    .style('fill', (d,i) => d.refTime ? \"#18515E\": \"#b1a7b6\")\n    .style('opacity', (d,i) => d.refTime === referenceTime ? 1.0 : 0.5)\n    .attr(\"class\", d => d.refTime ? \"active\": \"disabled\")\n    .on(\"click\", function click(d){       \n      if(!selected){\n        selected = this;\n        d3.select(selected).style('fill', '#18515E').style(\"opacity\", 1.0);\n     } \n     else {\n        d3.selectAll(\".miniItem0\").style(\"opacity\", 0.5);\n        selected = this;\n        d3.select(selected).style('fill', '#18515E').style(\"opacity\", 1.0);\n     }\n     //console.log(d)\n     updateRefTime(d.refTime)\n   });\n\n\n\n\n  mini.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis.ticks(24));\n\n  mini.append(\"g\")\n    .selectAll(\"rect\")\n    .attr(\"y\", 1)\n    .attr(\"height\", miniHeight - 1);\n\n  display();\n\n\n  function display() {\n    var rects, labels,\n      visItems = items.filter(function (d) { return d.start < maxExtent && d.end > minExtent; });\n\n    x1.domain([minExtent, maxExtent]);\n\n    //update main item rects\n    rects = itemRects.selectAll(\"rect\")\n      .data(items, function (d) { return d.id; })\n      .attr('id', d => d.start)\n      .attr(\"x\", function (d) { return x(d.start); })\n      .attr(\"width\", function (d) { return x(d.end) - x(d.start); });\n\n    rects.enter().append(\"rect\")\n      .attr(\"class\", function (d) { return \"miniItem\" + d.lane; })\n      .attr(\"x\", function (d) { return x(d.start); })\n      .attr(\"width\", function (d) { return x(d.end) - x(d.start); })\n\n    rects.exit().remove();\n\n    //update the item labels\n    labels = itemRects.selectAll(\"text\")\n      .data(items, function (d) { return d.id; })\n      .attr(\"x\", function (d) { return x1(Math.max(d.start, minExtent) + 2); });\n\n    labels.enter().append(\"text\")\n      .text(function (d) { return d.id; })\n      .attr(\"x\", function (d) { return x1(Math.max(d.start, minExtent)); })\n      .attr(\"text-anchor\", \"start\");\n\n    labels.exit().remove();\n\n  }\n  return null;\n}\n\n\nexport default Timeline\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport './spinner.css';\nimport MapView from './Components/Map'\nimport useFetch from './lib/use-fetch';\nimport create_polygons from './lib/form-polygons'\nimport { range } from './lib/create_range';\nimport tokens from './tokens.json'\nimport Timeline from './Components/Timeline'\n// import logo from './logo.svg';\n// import * as qs from 'querystring'\n\nconst BASE_URL = \"https://api.greenlytics.io/weather/v1\";\nconst REFERENCE_TIME = '2020-03-06T00:00:00.000000000';\nconst END_TIME = '2020-03-07T00:00:00.000000000';\nconst bounds = { ne: { lon: 37, lat: 70 }, sw: { lon: 2, lat: 52 } }\n\nconst coords = { lon: range(bounds.sw.lon, bounds.ne.lon, 0.5), lat: range(bounds.sw.lat, bounds.ne.lat, 0.5) }\n\n\nfunction App() {\n  const [fetch, isLoading, data, error] = useFetch();\n  const [polygons, setPolygons] = React.useState();\n  const [forecastTimes, setForecastTimes] = React.useState();\n  const [referenceTime, setReferenceTime] = React.useState(REFERENCE_TIME);\n  const [validTime, setValidTime] = React.useState(0);\n  const [validTimes, setValidTimes] = React.useState();\n\n  useEffect(() => {\n    const endpoint_url = \"/get_nwp?query_params=\"\n    const params = {\n      'model': 'DWD_ICON-EU',\n      'start_date': '2020-03-06 00',\n      'end_date': '2020-03-07 00',\n      'freq': '3H',\n      'coords': { 'latitude': coords.lat, 'longitude': coords.lon, 'height': [60] },\n      'variables': ['T', 'U', 'V']\n    }\n\n    const options = {\n      headers: {\n        \"Authorization\": tokens[\"greenlytics\"]\n      },\n    }\n\n    //console.log(params)\n    fetch(BASE_URL + endpoint_url + JSON.stringify(params), options)\n  }, [])\n\n  // collect data items to timeline\n  const dataItems = [{\n    start: '2019-08-15 10',\n    end: '2019-08-15 12'\n  },\n  {\n    start: '2019-08-15 14',\n    end: '2019-08-15 15'\n  }];\n\n  useEffect(() => {\n    if (!isLoading && data !== null && error === null) {\n      setForecastTimes(data.coords['reference_time'].data)\n      setValidTimes(data.coords['valid_time'].data)\n      setPolygons(create_polygons(data['data_vars'], coords.lon, coords.lat, validTime, 0, data.coords['reference_time'].data.indexOf(referenceTime)))\n      \n    }\n  }, [data, isLoading, error])\n\n  //show different valid times\n  useEffect(() => {\n    if (data) {\n      //console.log(data)\n      //console.log('should redefine polygons')\n      setPolygons(create_polygons(data['data_vars'], coords.lon, coords.lat, validTime, 0, forecastTimes.indexOf(referenceTime)))\n    }\n  }, [validTime])\n\n  //redraw polygons based when reference time changes\n  useEffect(() => {\n    if (data) {\n      setPolygons(create_polygons(data['data_vars'], coords.lon, coords.lat, validTime, 0, forecastTimes.indexOf(referenceTime)))\n    }\n  }, [referenceTime])\n\n  const createTime = hrs => {\n    const d = new Date(Date.parse(REFERENCE_TIME))\n    //console.log(d.getHours)\n    d.setHours(d.getHours() + hrs)\n    //console.log(d)\n    return d\n  }\n\n  const createDropdown = validTimes => {\n    return (<select\n      onChange={opt => setValidTime(opt.target.value)}>\n      {validTimes.map(el => (<option value={el} key={el}>{createTime(el).toLocaleTimeString()}</option>))}\n    </select>)\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"container\" className=\"svg-container\"></div>\n      {\n        polygons && validTimes ? (\n          <div>\n            <Timeline dataItems={dataItems} start={REFERENCE_TIME} end={END_TIME} refTimes={forecastTimes} updateRefTime={setReferenceTime} currentRef={referenceTime}/>\n            <MapView polygons={polygons} DropDown={createDropdown(validTimes)} />\n          </div>\n        ) :\n          (\n            <div className=\"center-content\">\n              <div className=\"sk-folding-cube\">\n                <div className=\"sk-cube1 sk-cube\"></div>\n                <div className=\"sk-cube2 sk-cube\"></div>\n                <div className=\"sk-cube4 sk-cube\"></div>\n                <div className=\"sk-cube3 sk-cube\"></div>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tempGradient.b83629ab.png\";"],"sourceRoot":""}